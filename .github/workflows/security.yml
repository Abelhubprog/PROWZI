# filepath: c:\Prowzi\.github\workflows\security.yml
name: Security Scan

on:
  push:
    branches: [main, develop]
    paths:
      - 'agent-runtime/**'
      - 'packages/**'
      - 'web/**'
      - 'docker/**'
      - 'infrastructure/**'
      - 'charts/**'
  pull_request:
    branches: [main]
    paths:
      - 'agent-runtime/**'
      - 'packages/**'
      - 'web/**'
      - 'docker/**'
      - 'infrastructure/**'
      - 'charts/**'
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'

env:
  NODE_PACKAGES: ${{ join(fromJSON('["packages","web"]'), ' ') }}
  DOCKER_DIRS: ${{ join(fromJSON('["docker/gateway","docker/mission-control"]'), ' ') }}

jobs:
  # Static security analysis for dependencies
  dependency-check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    strategy:
      matrix:
        scan-type: [rust, node, python]
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set Node packages for scanning
      id: set-node-packages
      if: matrix.scan-type == 'node'
      run: |
        packages=""
        for dir in ${{ env.NODE_PACKAGES }}; do
          if [ -d "$dir" ]; then
            found_packages=""
            # Look for directories with package.json AND a lockfile
            while IFS= read -r pkg; do
              pkg_dir=$(dirname "$pkg")
              if [[ -f "$pkg_dir/package-lock.json" || -f "$pkg_dir/pnpm-lock.yaml" || -f "$pkg_dir/yarn.lock" ]]; then
                found_packages="$found_packages $pkg_dir"
              fi
            done < <(find "$dir" -name "package.json" -type f)
            
            if [ -n "$found_packages" ]; then
              packages="$packages$found_packages"
            fi
          fi
        done
        
        packages=$(echo $packages | xargs)
        echo "matrix=$packages" >> $GITHUB_OUTPUT
        echo "Found Node.js packages with lockfiles in: $packages"
    
    - name: Setup Rust (for Rust dependencies)
      if: matrix.scan-type == 'rust'
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        
    - name: Setup Node.js (for Node dependencies) 
      if: matrix.scan-type == 'node' && steps.set-node-packages.outputs.matrix != ''
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Setup Python (for Python dependencies)
      if: matrix.scan-type == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Rust Security Audit
      if: matrix.scan-type == 'rust'
      run: |
        cargo install cargo-audit
        find . -name "Cargo.toml" -not -path "./target/*" | while read cargo_file; do
          echo "Auditing: $cargo_file"
          cargo audit --file "$cargo_file" || true
        done
    
    - name: Node.js Security Audit
      if: matrix.scan-type == 'node' && steps.set-node-packages.outputs.matrix != ''
      run: |
        for pkg_dir in ${{ steps.set-node-packages.outputs.matrix }}; do
          echo "Auditing: $pkg_dir"
          if [ -f "$pkg_dir/package-lock.json" ]; then
            (cd "$pkg_dir" && npm audit --audit-level=moderate) || true
          elif [ -f "$pkg_dir/pnpm-lock.yaml" ]; then
            (cd "$pkg_dir" && pnpm audit) || true
          elif [ -f "$pkg_dir/yarn.lock" ]; then
            (cd "$pkg_dir" && yarn audit) || true
          fi
        done
    
    - name: Python Security Scan with Safety
      if: matrix.scan-type == 'python'
      run: |
        pip install safety
        find . -name "requirements.txt" -not -path "./venv/*" -not -path "./.venv/*" | while read req; do
          echo "Scanning: $req"
          safety check -r "$req" || true
        done

  # SAST with CodeQL
  codeql:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      
    strategy:
      matrix:
        language: ['javascript', 'python', 'rust']
      fail-fast: false
        
    env:
      CODEQL_ENABLE_EXPERIMENTAL_FEATURES: "true"
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Container image security scanning
  container-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    if: github.event_name == 'push' || github.event_name == 'schedule'
    
    strategy:
      matrix:
        dir: ['gateway', 'mission-control']
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image for ${{ matrix.dir }}
      id: build-image
      run: |
        if [ -f "docker/${{ matrix.dir }}/Dockerfile" ]; then
          echo "Building docker/${{ matrix.dir }}/Dockerfile"
          docker build --build-arg REQ_PATH=requirements.txt -f docker/${{ matrix.dir }}/Dockerfile \
            -t prowzi-${{ matrix.dir }}:test .
          echo "image_built=true" >> $GITHUB_OUTPUT
        else
          echo "Dockerfile not found for ${{ matrix.dir }}, skipping"
          echo "image_built=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Scan ${{ matrix.dir }} image with Trivy
      if: steps.build-image.outputs.image_built == 'true'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'prowzi-${{ matrix.dir }}:test'
        format: 'sarif'
        output: 'trivy-${{ matrix.dir }}.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
    
    - name: Create empty SARIF file if build failed
      if: steps.build-image.outputs.image_built != 'true'
      run: |
        cat > trivy-${{ matrix.dir }}.sarif << 'EOL'
        {
          "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
          "version": "2.1.0",
          "runs": []
        }
        EOL
    
    - name: Upload Trivy scan results for ${{ matrix.dir }}
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-${{ matrix.dir }}.sarif'
        category: 'container-${{ matrix.dir }}'

  # Secrets scanning
  secrets-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install TruffleHog
      run: |
        curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
    
    - name: Scan for secrets
      run: |
        trufflehog git file://. --since-commit HEAD~1 --only-verified --fail

  # Infrastructure security scanning
  iac-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check infrastructure directory exists
      id: check-dirs
      run: |
        if [ -d "infrastructure" ]; then
          echo "infra_exists=true" >> $GITHUB_OUTPUT
        else
          echo "infra_exists=false" >> $GITHUB_OUTPUT
        fi
        
        if [ -d "charts" ]; then
          echo "charts_exists=true" >> $GITHUB_OUTPUT
        else
          echo "charts_exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Run Checkov on infrastructure
      if: steps.check-dirs.outputs.infra_exists == 'true'
      uses: bridgecrewio/checkov-action@master
      with:
        directory: infrastructure
        framework: dockerfile,kubernetes,terraform
        output_format: sarif
        output_file_path: checkov-infrastructure.sarif
        soft_fail: true
    
    - name: Run Checkov on charts
      if: steps.check-dirs.outputs.charts_exists == 'true'
      uses: bridgecrewio/checkov-action@master
      with:
        directory: charts
        framework: kubernetes,helm
        output_format: sarif
        output_file_path: checkov-charts.sarif
        soft_fail: true
    
    - name: Create combined SARIF file
      run: |
        echo '{"$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","version":"2.1.0","runs":[]}' > checkov.sarif
        
        if [ -f "checkov-infrastructure.sarif" ] && [ -s "checkov-infrastructure.sarif" ]; then
          cp checkov-infrastructure.sarif checkov.sarif
        fi
        
        if [ -f "checkov-charts.sarif" ] && [ -s "checkov-charts.sarif" ]; then
          if [ -s "checkov.sarif" ] && [ "$(cat checkov.sarif)" != '{"$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","version":"2.1.0","runs":[]}' ]; then
            # Merge SARIF files if both exist
            jq -s '{"$schema": .[0]."$schema", "version": .[0].version, "runs": [.[0].runs[], .[1].runs[]]}' checkov.sarif checkov-charts.sarif > merged-checkov.sarif
            mv merged-checkov.sarif checkov.sarif
          else
            cp checkov-charts.sarif checkov.sarif
          fi
        fi
        
        echo "Final SARIF file size: $(wc -c < checkov.sarif) bytes"
    
    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: checkov.sarif
        category: 'iac-security'
