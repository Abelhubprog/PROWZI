# Kind cluster configuration for Prowzi e2e testing
# This configuration sets up a multi-node Kubernetes cluster for end-to-end testing
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
name: prowzi-e2e

# Configure the cluster with multiple nodes for realistic testing
nodes:
  # Control plane node
  - role: control-plane
    image: kindest/node:v1.28.0
    kubeadmConfigPatches:
      - |
        kind: InitConfiguration
        nodeRegistration:
          kubeletExtraArgs:
            node-labels: "prowzi.io/node-type=control-plane"
    extraPortMappings:
      # Expose API server
      - containerPort: 6443
        hostPort: 6443
        protocol: TCP
      # Expose ingress controller ports
      - containerPort: 80
        hostPort: 80
        protocol: TCP
      - containerPort: 443
        hostPort: 443
        protocol: TCP
      # Expose Prometheus metrics
      - containerPort: 9090
        hostPort: 9090
        protocol: TCP
      # Expose Grafana dashboard
      - containerPort: 3000
        hostPort: 3000
        protocol: TCP

  # Worker nodes for distributed testing
  - role: worker
    image: kindest/node:v1.28.0
    kubeadmConfigPatches:
      - |
        kind: JoinConfiguration
        nodeRegistration:
          kubeletExtraArgs:
            node-labels: "prowzi.io/node-type=worker,prowzi.io/workload=agents"
    extraMounts:
      # Mount docker socket for agent runtime testing
      - hostPath: /var/run/docker.sock
        containerPath: /var/run/docker.sock
        readOnly: false

  - role: worker
    image: kindest/node:v1.28.0
    kubeadmConfigPatches:
      - |
        kind: JoinConfiguration
        nodeRegistration:
          kubeletExtraArgs:
            node-labels: "prowzi.io/node-type=worker,prowzi.io/workload=platform"

# Configure networking
networking:
  # Use a custom pod subnet to avoid conflicts
  podSubnet: "10.244.0.0/16"
  serviceSubnet: "10.96.0.0/16"
  # Disable default CNI to install our own
  disableDefaultCNI: false
  # Configure API server settings
  apiServerAddress: "127.0.0.1"
  apiServerPort: 6443

# Configure containerd settings for better performance
containerdConfigPatches:
  - |-
    [plugins."io.containerd.grpc.v1.cri".registry]
      config_path = "/etc/containerd/certs.d"
    [plugins."io.containerd.grpc.v1.cri".registry.mirrors]
      [plugins."io.containerd.grpc.v1.cri".registry.mirrors."docker.io"]
        endpoint = ["https://registry-1.docker.io"]
      [plugins."io.containerd.grpc.v1.cri".registry.mirrors."gcr.io"]
        endpoint = ["https://gcr.io"]
      [plugins."io.containerd.grpc.v1.cri".registry.mirrors."k8s.gcr.io"]
        endpoint = ["https://k8s.gcr.io"]

# Configure kubeadm for testing requirements
kubeadmConfigPatches:
  - |
    kind: ClusterConfiguration
    apiServer:
      extraArgs:
        # Enable audit logging for security testing
        audit-log-path: "/var/log/audit.log"
        audit-policy-file: "/etc/kubernetes/audit-policy.yaml"
        # Enable feature gates for testing
        feature-gates: "EphemeralContainers=true"
      extraVolumes:
        - name: audit-policy
          hostPath: "/etc/kubernetes/audit-policy.yaml"
          mountPath: "/etc/kubernetes/audit-policy.yaml"
          readOnly: true
        - name: audit-logs
          hostPath: "/var/log"
          mountPath: "/var/log"
          readOnly: false
    controllerManager:
      extraArgs:
        # Enable horizontal pod autoscaling for load testing
        horizontal-pod-autoscaler-sync-period: "10s"
        # Configure node monitoring
        node-monitor-grace-period: "40s"
        node-monitor-period: "5s"
    scheduler:
      extraArgs:
        # Enable scheduling profiles for testing
        config: "/etc/kubernetes/scheduler-config.yaml"
    etcd:
      local:
        extraArgs:
          # Configure etcd for testing
          auto-compaction-retention: "1"
          max-request-bytes: "33554432"

# Configure feature gates for testing advanced Kubernetes features
featureGates:
  EphemeralContainers: true
  JobTrackingWithFinalizers: true
  ServerSideFieldValidation: true
  ProxyTerminatingEndpoints: true

# Configure runtime settings
runtimeConfig:
  api/all: "true"